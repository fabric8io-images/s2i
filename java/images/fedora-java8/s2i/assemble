#!/bin/sh
# Global S2I variable setup
source `dirname "$0"`/s2i-setup

# Maven arguments setting up the environment
maven_env_args="-Dmaven.repo.local=${S2I_ARTIFACTS_DIR}/m2"

# =========================================================================
# Helper functions:

function check_error() {
  local label=$1
  local error=$2
  if [ ${error} -ne 0 ]; then
    echo "Aborting due to error code $error for $label"
    exit ${error}
  fi
}

function get_maven_output_dir() {
  local dir=""

  # If multi module build and no ARTIFACT_DIR is set --> error
  if [ x"${ARTIFACT_DIR}" = x ]; then
    echo " ${MAVEN_ARGS} ${MAVEN_ARGS_APPEND}" | grep -q ' -pl'
    if [ $? -eq 0 ]; then
       echo "ARTIFACT_DIR must be set for multi module Maven builds"
       exit 1
    fi
    dir="${S2I_SOURCE_DIR}/target"
  else
    if [ "${ARTIFACT_DIR:0:1}" = "/" ]; then
       echo "ARTIFACT_DIR \"${ARTIFACT_DIR}\" must not be absolute but relative to the source directory"
       exit 1
    fi
    dir="${S2I_SOURCE_DIR}/${ARTIFACT_DIR}"
  fi

  # Normalize dir
  dir=$(echo ${dir} | tr -s /)
  dir=${dir%/}
  # The parent must exist but target/ won't exist yet
  if [ ! -d $(dirname "${dir}"}) ]; then
    echo "Please specify an existing build directory ARTIFACT_DIR (tried '$(dirname "${dir}")' which does not exist)"
    exit 1
  fi
  echo ${dir}
}

function copy_dir() {
  local src=$1
  local dest=$2

  # Copy recursively and preserve ownership: -a
  cp -a ${src}/* ${dest}
}

function copy_artifacts() {
    local dir=$1
    local dest=$2

    cd ${dir}

    local cp_args=${ARTIFACT_COPY_ARGS}
    if [ x"${cp_args}" = x ]; then
        if [ -d "hawt-app" ]; then
            cp_args="-r hawt-app/*"
        else
            cp_args="*.jar"
        fi
    fi
    echo "Running: cp -v ${cp_args} ${dest}"
    cp -v ${cp_args} ${dest}
}

function setup_maven() {
  if [ -n "$HTTP_PROXY_HOST" -a -n "$HTTP_PROXY_PORT" ]; then
    xml="<proxy>\
         <id>genproxy</id>\
         <active>true</active>\
         <protocol>http</protocol>\
         <host>$HTTP_PROXY_HOST</host>\
         <port>$HTTP_PROXY_PORT</port>"
    if [ -n "$HTTP_PROXY_USERNAME" -a -n "$HTTP_PROXY_PASSWORD" ]; then
      xml="$xml\
         <username>$HTTP_PROXY_USERNAME</username>\
         <password>$HTTP_PROXY_PASSWORD</password>"
    fi
    if [ -n "$HTTP_PROXY_NONPROXYHOSTS" ]; then
      xml="$xml\
         <nonProxyHosts>$HTTP_PROXY_NONPROXYHOSTS</nonProxyHosts>"
    fi
  xml="$xml\
       </proxy>"
    sed -i "s|<!-- ### configured http proxy ### -->|$xml|" $HOME/.m2/settings.xml
  fi

  if [ -n "$MAVEN_MIRROR_URL" ]; then
    xml="    <mirror>\
      <id>mirror.default</id>\
      <url>$MAVEN_MIRROR_URL</url>\
      <mirrorOf>external:*</mirrorOf>\
    </mirror>"
    sed -i "s|<!-- ### configured mirrors ### -->|$xml|" $HOME/.m2/settings.xml
  fi

  if [ -f "${S2I_SOURCE_DIR}/configuration/settings.xml" ]; then
    maven_env_args="${maven_env_args} -s ${S2I_SOURCE_DIR}/configuration/settings.xml"
    echo "Using custom maven settings from ${S2I_SOURCE_DIR}/configuration/settings.xml"
  fi
}

function build_maven() {
  # Where artifacts are created during build
  local build_dir=$1

  # Where to put the artifacts
  local app_dir=$2

  # Default args: no tests, if a module is specified, only build this module
  local maven_args=${MAVEN_ARGS:-package -DskipTests -Dmaven.javadoc.skip=true -Dmaven.site.skip=true -Dmaven.source.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dfindbugs.skip=true -Dpmd.skip=true -Dfabric8.skip=true -e -B}

  # If there is no user provided MAVEN_OPTS, use options from run-java.sh
  if [ -f ${RUN_JAVA_DIR}/run-java.sh -a -z "${MAVEN_OPTS}" ]; then
    export MAVEN_OPTS=$(${RUN_JAVA_DIR}/run-java.sh options)
  fi

  if [ ! -z "${MAVEN_OPTS}" ]; then
    echo "Using MAVEN_OPTS '${MAVEN_OPTS}'"
  fi

  echo "Found pom.xml ... "

  local old_dir=$(pwd)
  cd ${S2I_SOURCE_DIR}
  check_error "changing directory to ${S2I_SOURCE_DIR}" $?

  local mvn="mvn"


  # =========
  # Run Maven
  echo "Running 'mvn ${maven_env_args} ${maven_args} ${MAVEN_ARGS_APPEND}'"
  ${mvn} ${maven_env_args} --version
  ${mvn} ${maven_env_args} ${maven_args} ${MAVEN_ARGS_APPEND}
  check_error "Maven build" $?

  # ==============
  # Copy artifacts
  echo "Copying Maven artifacts from ${build_dir} to ${app_dir} ..."
  copy_artifacts ${build_dir} ${app_dir}
  check_error "copying artifacts from ${build_dir} to ${app_dir}" $?

  # ======================
  # ======================
  # Remove repo if desired
  if [ "x${MAVEN_CLEAR_REPO}" != "x" ]; then
    rm -rf "${S2I_ARTIFACTS_DIR}/m2"
    check_error "Cannot remove local Maven repository ${S2I_ARTIFACTS_DIR}/m2" $?
  fi

  cd ${old_dir}
}


# =========================================================================
# Gradle support

function get_gradle_output_dir() {
  local dir=""

  # If multi module build and no ARTIFACT_DIR is set --> error
  if [ x"${ARTIFACT_DIR}" = x ]; then
    dir="${S2I_SOURCE_DIR}/build/libs"
  else
    if [ "${ARTIFACT_DIR:0:1}" = "/" ]; then
       echo "ARTIFACT_DIR \"${ARTIFACT_DIR}\" must not be absolute but relative to the source directory"
       exit 1
    fi
    dir="${S2I_SOURCE_DIR}/${ARTIFACT_DIR}"
  fi

  echo ${dir}
}

function build_gradle() {
  # Where artifacts are created during build
  local build_dir=$1

  # Where to put the artifacts
  local app_dir=$2

  # Default args
  local gradle_args=${GRADLE_ARGS:-build -x test}

  # If there is no user provided GRADLE_OPTS, use options from run-java.sh
  if [ -f "${RUN_JAVA_DIR}/run-java.sh" ] && [ -z "${GRADLE_OPTS}" ]; then
    export GRADLE_OPTS=$(${RUN_JAVA_DIR}/run-java.sh options)
  fi

  if [ ! -z "${GRADLE_OPTS}" ]; then
    echo "Using GRADLE_OPTS '${GRADLE_OPTS}'"
  fi

  local old_dir=$(pwd)
  cd ${S2I_SOURCE_DIR}
  check_error "changing directory to ${S2I_SOURCE_DIR}" $?

  # =========
  # Run Gradle
  echo "Running './gradlew --no-daemon ${gradle_args} ${GRADLE_ARGS_APPEND}'"
  ./gradlew --no-daemon ${gradle_args} ${GRADLE_ARGS_APPEND}
  check_error "Gradle build" $?

  # ==============
  # Copy artifacts
  echo "Copying Gradle artifacts from ${build_dir} to ${app_dir} ..."
  copy_artifacts ${build_dir} ${app_dir}
  check_error "copying artifacts from ${build_dir} to ${app_dir}" $?

  # ======================
  # Remove repo if desired
  if [ "x${GRADLE_CLEAR_REPO}" != "x" ]; then
    rm -rf "${S2I_ARTIFACTS_DIR}/gradle"
    check_error "Cannot remove local Gradle repository ${S2I_ARTIFACTS_DIR}/gradle" $?
  fi

  cd ${old_dir}
}



# =========================================================================
# Main

echo "=================================================================="
echo "Starting S2I Java Build ....."
[ -d "${DEPLOYMENTS_DIR}" ] || mkdir -p "${DEPLOYMENTS_DIR}"
if [ -f "${S2I_SOURCE_DIR}/pom.xml" ]; then
  echo "S2I source build for Maven detected"
  build_dir=$(get_maven_output_dir)
  check_error "Cannot get output dir: $build_dir" $?
  # If a pom.xml is present use maven
  setup_maven
  build_maven ${build_dir} ${DEPLOYMENTS_DIR}
elif [ -f "${S2I_SOURCE_DIR}/Dockerfile" ]; then
  # This is a S2I binary build coming from fabric8-maven-plugin
  echo "S2I binary build from fabric8-maven-plugin detected"
  if [ -d "${S2I_SOURCE_DIR}/maven" ]; then
    binary_dir="${S2I_SOURCE_DIR}/maven"
  elif [ -d "${S2I_SOURCE_DIR}/deployments" ]; then
    binary_dir="${S2I_SOURCE_DIR}/deployments"
  elif [ $(find "${S2I_SOURCE_DIR}" -maxdepth 1 -type d | grep -v -e "^${S2I_SOURCE_DIR}$" | wc -l) == 1 ]; then
    # Found a single directory, take this
    binary_dir=$(find "${S2I_SOURCE_DIR}" -maxdepth 1 -type d | grep -v -e "^${S2I_SOURCE_DIR}$")
  else
    check_error "No single directory found in ${S2I_SOURCE_DIR} but:\n $(ls -l ${S2I_SOURCE_DIR})" 1
  fi
  echo "Copying binaries from ${binary_dir} to ${DEPLOYMENTS_DIR} ..."
  copy_dir ${binary_dir} ${DEPLOYMENTS_DIR}
  check_error "copying ${binary_dir} to ${DEPLOYMENTS_DIR}" $?

elif ls ${S2I_SOURCE_DIR}/*.gradle* &> /dev/null; then
  echo "S2I source build for Gradle detected, due to presence of a *.gradle* in ${S2I_SOURCE_DIR}"
  build_dir=$(get_gradle_output_dir)
  check_error "Cannot get output dir: $build_dir" $?
  build_gradle ${build_dir} ${DEPLOYMENTS_DIR}

else
  echo "S2I source build with plain binaries detected"
  if [ -d "${S2I_SOURCE_DIR}/deployments" ]; then
    default_binary_dir="${S2I_SOURCE_DIR}/deployments"
  else
    default_binary_dir="${S2I_SOURCE_DIR}"
  fi
  binary_dir="${ARTIFACT_DIR:-${default_binary_dir}}"
  # Assuming that the source already contains compiled artefacts
  echo "Copying binaries from ${binary_dir} to ${DEPLOYMENTS_DIR} ..."
  copy_dir ${binary_dir} ${DEPLOYMENTS_DIR}
  check_error "copying ${binary_dir} to ${DEPLOYMENTS_DIR}" $?
fi

# check if this is a fat jar executable archive. SpringBoot fat jars can be exploded
echo "Checking for fat jar archive..."
old_dir=`pwd`
cd "${DEPLOYMENTS_DIR}"
nr_jars=`ls *.jar 2>/dev/null | grep -v '^original-' | wc -l | tr -d '[[:space:]]'`
if [ ${nr_jars} = 1 ]; then
  single_jar=`ls *.jar | grep -v '^original-'`
  echo "Found ${single_jar}..."
  nr_devtools=`unzip -l "${single_jar}" 2>/dev/null | grep -e 'spring-boot-devtools-.*\.jar' | wc -l | tr -d '[[:space:]]'`
  if [ ${nr_devtools} = 1 ]; then
    main_class=`unzip -p "${single_jar}" META-INF/MANIFEST.MF | sed -n 's/Main-Class: \(.*\)$/\1/p' | tr -d '[[:space:]]'`
    echo "Found main class ${main_class}"
    if [[ "${main_class}" =~ org.springframework.boot.loader. ]]; then
      # explosion!!!
      echo "SpringBoot executable jar detected, exploding..."
      unzip -q "${single_jar}"
      # remove fat jar, run script will setup main class, etc. for run-java.sh
      rm "${single_jar}"
      # to support 'oc rsh', set group permissions to be same as the user and set the group to
      # the root group
      chgrp -R 0 .
      chmod -R g=u .
    fi
  fi
fi
cd "${old_dir}"

# Remove java temporary hsperfdata directory owned by the jboss user
rm -rf /tmp/hsperfdata_jboss

echo "... done"
